% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BlastCoordPlotly.R
\name{BlastCoordPlotly}
\alias{BlastCoordPlotly}
\title{Compute the elements that represent the blast configuration for a interactive plotly graph}
\usage{
BlastCoordPlotly(
  QuerySeqId,
  QueryLength,
  QueryStart,
  QueryEnd,
  SubjectSeqId,
  SubjectStart,
  SubjectEnd,
  SubjectLength,
  Length,
  Height = 0.5,
  Step = 10,
  LineDots = 100
)
}
\arguments{
\item{QuerySeqId}{Name of the query (submitted sequence)}

\item{QueryLength}{Length of the query (full length not the mapped part)}

\item{QueryStart}{Beggining postition of the matching part in the query}

\item{QueryEnd}{Ending position of the matching part in the query}

\item{SubjectSeqId}{Name of the subject (reference sequence)}

\item{SubjectStart}{Beggining postition of the matching part in the subject}

\item{SubjectEnd}{Ending position of the matching part in the subject}

\item{SubjectLength}{Length of the query (full length not the mapped part)}

\item{Length}{Length of the matching part between subject and query}

\item{Height}{height of the widget}

\item{Step}{fraction of the gap between the shared parts and the specific parts}

\item{LineDots}{inneer graduation set in AA}
}
\value{
List of Dataframes for a plotly graph
}
\description{
Compute the elements that represent the blast configuration for a interactive plotly graph
}
\examples{
library(plotly)
library(viridisLite)
BlastPalette<-viridis(3)
R_FilePath <- system.file("extdata",
 "blast_rescue.example.txt",
  package = "isoformnspectRe")
Rescue<-read.table(
 R_FilePath,
 header=TRUE)
 Infos <- Rescue[1,]
 DFs <- BlastCoordPlotly(Infos$QuerySeqId, Infos$QueryLength, Infos$QueryStart,
 Infos$QueryEnd, Infos$SubjectSeqId, Infos$SubjectStart, Infos$SubjectEnd,
 Infos$SubjectLength, Infos$Length)
 names(BlastPalette) <- c(as.vector(Infos$QuerySeqId) ,
 paste( as.vector(Infos$QuerySeqId), "<br>", as.vector(Infos$SubjectSeqId), sep = "" ),
 as.vector(Infos$SubjectSeqId))
 P<-plotly::plot_ly()
 P <- plotly::add_trace(P,
 x = DFs$MatchBlock$x,
 y = DFs$MatchBlock$y,
 color = I(as.vector(BlastPalette[2])), type = "scatter", mode = "lines",
 fill = "toself", name = paste( as.vector(Infos$QuerySeqId), "<br>",
 as.vector(Infos$SubjectSeqId), sep = ""), hoverinfo="name",hoverlabel=list(namelength=-1))
 P
 P <- plotly::add_trace(P, x = DFs$SubjectBlock$x, y = DFs$SubjectBlock$y,
 color = I(as.vector(BlastPalette[3])), type = "scatter", mode = "lines", fill = "toself",
 name = Infos$SubjectSeqId, hoverinfo="name", hoverlabel=list(namelength=-1))
 P
 P <- plotly::add_trace(P, x = DFs$QueryBlock$x, y = DFs$QueryBlock$y,
 color = I(as.vector(BlastPalette[1])), type = "scatter", mode = "lines", fill = "toself",
  name = Infos$SubjectSeqId,
 hoverinfo="name", hoverlabel=list(namelength=-1))
 P
 P<-plotly::add_segments(P, x=~x, y=~y, xend=~xend, yend=~yend,
 hoverinfo="text", color=I(BlastPalette[3]), text=~text,
 data=DFs$SubjectConnectors)
 P
 P<-plotly::add_segments(P, x=~x, y=~y, xend=~xend, yend=~yend,
 hoverinfo="text", color=I(BlastPalette[1]), text=~text,
 data=DFs$QueryConnectors)
 P
 P<-plotly::hide_legend(P)
 P
}
